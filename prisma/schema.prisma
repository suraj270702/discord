// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Userrole{
  ADMIN
  USER
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Userrole @default(USER)
  accounts      Account[]
  
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model VerificationToken {
  id String @id @default (cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model Profile {
  id        String    @id @default(cuid())
  userId    String @unique
  name      String
  imageUrl  String  @db.Text
  email     String

  servers Server[]
  members Member[]
  channel Channel[]
  
  createdAt  DateTime   @default (now())
  updatedAt  DateTime   @updatedAt
}

model Server {
  id          String   @id @default(cuid())
  name        String
  imageUrl     String  @db.Text
  inviteCode   String  @db.Text
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id],onDelete : Cascade)
  members    Member[]
  channel Channel[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime   @updatedAt
  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String @id  @default(uuid())
  role MemberRole @default(GUEST)
  profileId String
  profile Profile @relation( fields: [profileId],references: [id],onDelete: Cascade)
  serverId String
  server Server  @relation(fields:[serverId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum  ChannelType {
  Text
  AUDIO
  VIDEO
}


model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(Text)

  profileId String
  profile Profile @relation( fields: [profileId],references: [id],onDelete: Cascade)
  serverId String
  server Server  @relation(fields:[serverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}